{
	"name": "02_spark_create_gold_trip_data_green_agg",
	"properties": {
		"folder": {
			"name": "02_TAXI_ANALISE"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Cluster1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "a841ece9-7c7e-4374-a965-f073a38e1bb5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
				"name": "Cluster1",
				"type": "Spark",
				"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Trip Data Aggregation \n",
					"### Group By Columns\n",
					"1. year\n",
					"2. Month\n",
					"3. Pickup Location ID\n",
					"4. Drop Off Location ID\n",
					"\n",
					"### Aggregated Columns\n",
					"1. Total Trip Count\n",
					"2. Total Fare Amount\n",
					"\n",
					"### Objetivo no notebook\n",
					"\n",
					"Demonstrar a integração entre o  Spark Pool e Serverless SQL Pool\n",
					"\n",
					"1. Cria uma tabela agregada in Spark Pool\n",
					"2. Acesso os dados do Serverless SQL Pool "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Defina os caminhos da pasta para que possam ser usados mais tarde.\n",
					"bronze_folder_path = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze'\n",
					"silver_folder_path = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/silver'\n",
					"gold_folder_path = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/gold'"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Defina a spark  config para ser capaz de obter as colunas particionadas ano e mês como strings em vez de inteiros.\n",
					"spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"-- Criar banco de dados para o qual vamos gravar os dados\n",
					"\n",
					"CREATE DATABASE IF NOT EXISTS nyc_taxi_ldw_spark\n",
					"LOCATION 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/gold';"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Leia os dados da camada prata prata a serem processados.\n",
					"trip_data_green_df = spark.read.parquet(f\"{silver_folder_path}/trip_data_green\") "
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Perform the required aggregations\n",
					"# 1. Total trip count\n",
					"# 2. Total fare amount\n",
					"from pyspark.sql.functions import *\n",
					"\n",
					"trip_data_green_agg_df = trip_data_green_df \\\n",
					"                        .groupBy(\"year\", \"month\", \"pu_location_id\", \"do_location_id\") \\\n",
					"                        .agg(count(lit(1)).alias(\"total_trip_count\"),\n",
					"                        round(sum(\"fare_amount\"), 2).alias(\"total_fare_amount\"))"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write the aggregated data to the gold table for consumption\n",
					"\n",
					"trip_data_green_agg_df.write.mode(\"overwrite\").partitionBy(\"year\", \"month\").format(\"parquet\").saveAsTable(\"nyc_taxi_ldw_spark.trip_data_green_agg\")"
				],
				"execution_count": 6
			}
		]
	}
}