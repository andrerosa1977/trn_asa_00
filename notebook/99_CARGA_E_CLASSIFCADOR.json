{
	"name": "99_CARGA_E_CLASSIFCADOR",
	"properties": {
		"folder": {
			"name": "04_SQL_DEDICADO"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5e3beb58-8929-46bb-8e70-571f46a72b6c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### O script cria um grupo de carga de trabalho chamado CEODemo para reservar recursos exclusivamente para o grupo de carga de trabalho. Por exemplo, um grupo de carga de trabalho com MIN_PERCENTAGE_RESOURCE definido como 10% e REQUEST_MIN_RESOURCE_GRANT_PERCENT definido como 5% tem simultaneidade 2 garantida."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"IF NOT EXISTS (SELECT * FROM sys.workload_management_workload_groups where name = 'CEODemo')\r\n",
					"BEGIN\r\n",
					"    Create WORKLOAD GROUP CEODemo WITH  \r\n",
					"    ( MIN_PERCENTAGE_RESOURCE = 10        -- integer value\r\n",
					"    ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 5 -- integer value\r\n",
					"    ,CAP_PERCENTAGE_RESOURCE = 100\r\n",
					"    )\r\n",
					"END"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"****#### Na janela de consulta, substitua o script pelo seguinte para criar um **classificador** de carga de trabalho chamado CEODreamDemo que atribui um grupo de carga de trabalho e a importância a solicitações de entrada:"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"IF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers where  name = 'CEODreamDemo')\r\n",
					"BEGIN\r\n",
					"    Create Workload Classifier CEODreamDemo with\r\n",
					"    ( Workload_Group ='CEODemo',MemberName='asa.sql.workload02',IMPORTANCE = BELOW_NORMAL);\r\n",
					"END"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"#### Na janela de consulta, substitua o script pelo seguinte para confirmar que não há nenhuma consulta ativa em execução por asa.sql.workload02 (pode haver consultas suspensas):"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT s.login_name, r.[Status], r.Importance, submit_time,\r\n",
					"start_time ,s.session_id FROM sys.dm_pdw_exec_sessions s\r\n",
					"JOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\r\n",
					"WHERE s.login_name IN ('asa.sql.workload02') and Importance\r\n",
					"is not NULL AND r.[status] in ('Running','Suspended')\r\n",
					"ORDER BY submit_time, status"
				],
				"execution_count": null
			}
		]
	}
}