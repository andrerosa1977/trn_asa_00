{
	"name": "02_pandas_parquet",
	"properties": {
		"folder": {
			"name": "03_PANDAS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Cluster1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "7a9d0e87-fae5-4ee6-8e89-00e43efe8436"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
				"name": "Cluster1",
				"type": "Spark",
				"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Importar Biblioteca Pandas"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Criaremos um DataFrame com dados a serem salvos no Parquet."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"pessoas_df = pd.DataFrame([\r\n",
					"    {\"nome\":\"Pedro\", \"idade\": 15},\r\n",
					"    {\"nome\":\"João\", \"idade\":30},\r\n",
					"    {\"nome\":\"Maria\", \"idade\":19},\r\n",
					"    {\"nome\":\"Marcelo\", \"idade\":18},\r\n",
					"    {\"nome\":\"Alex\", \"idade\":38},\r\n",
					"    {\"nome\":\"Otavio\", \"idade\":44},\r\n",
					"    {\"nome\":\"Ricardo\", \"idade\":23},\r\n",
					"    {\"nome\":\"Camila\", \"idade\":12},\r\n",
					"    {\"nome\":\"Alice\", \"idade\":24},\r\n",
					"    {\"nome\":\"Marlei\", \"idade\":32},\r\n",
					"    {\"nome\":\"Marilene\", \"idade\":56},\r\n",
					"    {\"nome\":\"Judite\", \"idade\":60},\r\n",
					"])"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Exibiremos os dados do DataFrame para conferir após salvar."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"print(pessoas_df)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Salvaremos o DataFrame como um arquivo Parquet, basta definir um nome para o arquivo, mas outros paramêtros estão disponíveis, como por exemplo compressão."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pessoas_df.to_parquet(\"./pessoas.parquet\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Após salvo, vamos carregar o arquivo Parquet que acabamos de criar para conferência, todas as informações serão preservadas."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"parquet_df = pd.read_parquet(\"./pessoas.parquet\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Por fim, vamos conferir os dados que acabamos de salvar. Como você pode observar, tudo é igual ao DataFrame anterior."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(parquet_df)"
				],
				"execution_count": 6
			}
		]
	}
}