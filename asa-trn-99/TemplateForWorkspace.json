{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "asa-trn-99"
		},
		"AzureOLTP_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureOLTP'"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"AzureSynapseAnalytics2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics2'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"asa-trn-99-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asa-trn-99-WorkspaceDefaultSqlServer'"
		},
		"asa-trn-99-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlstrnsolar99.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/01 CARGA RAW')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CARGA CATEGORIA",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CATEGORIA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "STG_CATEGORIA",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CARGA CIDADE",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CARGA CATEGORIA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CIDADE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "STG_CIDADE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CARGA CLIENTE",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CARGA CIDADE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CLIENTE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "STG_CLIENTE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CARGA PRODUTOS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CARGA CLIENTE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PRODUTO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "STG_PRODUTOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CARGA UNIDADE",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CARGA PRODUTOS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "UNIDADE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "STG_UNIDADE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CARGA  VENDAS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CARGA VENDEDORES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VENDAS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "STG_VENDAS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CARGA VENDEDORES",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CARGA UNIDADE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VENDEDORES",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "STG_VENDEDORES",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CARGA VENDAS ITENS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CARGA  VENDAS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VENDAS_ITENS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SRT_VENDAS_ITENS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-09T13:19:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CATEGORIA')]",
				"[concat(variables('workspaceId'), '/datasets/STG_CATEGORIA')]",
				"[concat(variables('workspaceId'), '/datasets/CIDADE')]",
				"[concat(variables('workspaceId'), '/datasets/STG_CIDADE')]",
				"[concat(variables('workspaceId'), '/datasets/CLIENTE')]",
				"[concat(variables('workspaceId'), '/datasets/STG_CLIENTE')]",
				"[concat(variables('workspaceId'), '/datasets/PRODUTO')]",
				"[concat(variables('workspaceId'), '/datasets/STG_PRODUTOS')]",
				"[concat(variables('workspaceId'), '/datasets/UNIDADE')]",
				"[concat(variables('workspaceId'), '/datasets/STG_UNIDADE')]",
				"[concat(variables('workspaceId'), '/datasets/VENDAS')]",
				"[concat(variables('workspaceId'), '/datasets/STG_VENDAS')]",
				"[concat(variables('workspaceId'), '/datasets/VENDEDORES')]",
				"[concat(variables('workspaceId'), '/datasets/STG_VENDEDORES')]",
				"[concat(variables('workspaceId'), '/datasets/VENDAS_ITENS')]",
				"[concat(variables('workspaceId'), '/datasets/SRT_VENDAS_ITENS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_CDC')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetChangeCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('DECLARE @begin_time datetime, @end_time datetime, @from_lsn binary(10), @to_lsn binary(10); \nSET @begin_time = ''',pipeline().parameters.triggerStartTime,''';\nSET @end_time = ''',pipeline().parameters.triggerEndTime,''';\nSET @from_lsn = sys.fn_cdc_map_time_to_lsn(''smallest greater than or equal'', @begin_time);\nSET @to_lsn = sys.fn_cdc_map_time_to_lsn(''largest less than'', @end_time);\nSELECT count(1) changecount FROM [cdc].[fn_cdc_get_net_changes_dbo_vendas](@from_lsn, @to_lsn, ''all'')')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "VENDAS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "HasChangedRows",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetChangeCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(activity('GetChangeCount').output.firstRow.changecount),0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Incremental Data_parquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE @begin_time datetime, @end_time datetime, @from_lsn binary(10), @to_lsn binary(10); \nSET @begin_time = ''',pipeline().parameters.triggerStartTime,''';\nSET @end_time = ''',pipeline().parameters.triggerEndTime,''';\nSET @from_lsn = sys.fn_cdc_map_time_to_lsn(''smallest greater than or equal'', @begin_time);\nSET @to_lsn = sys.fn_cdc_map_time_to_lsn(''largest less than'', @end_time);\nSELECT * FROM cdc.fn_cdc_get_net_changes_dbo_vendas(@from_lsn, @to_lsn, ''all'')')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VENDAS",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "vendas_cdc",
											"type": "DatasetReference",
											"parameters": {
												"triggerStart": {
													"value": "@pipeline().parameters.triggerStartTime",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"triggerStartTime": {
						"type": "string",
						"defaultValue": "2022-09-12 01:25:09.230"
					},
					"triggerEndTime": {
						"type": "string",
						"defaultValue": "2022-09-12 18:00:00.000"
					}
				},
				"folder": {
					"name": "MODELO"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/VENDAS')]",
				"[concat(variables('workspaceId'), '/datasets/vendas_cdc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_SPARK_CRM')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "03_CRIA_TABELA_SPARK_PARTITION",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "03_CRIA_TABELA_SPARK_PARTITION",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/03_CRIA_TABELA_SPARK_PARTITION')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_ETL_CRM')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CARGA_CRM",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/CARGA_CRM')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_ETL_IR')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlPoolSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"path": "treinamento/staging"
							}
						},
						"inputs": [
							{
								"referenceName": "IR_CATEGORIA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TBL_Categoria",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/IR_CATEGORIA')]",
				"[concat(variables('workspaceId'), '/datasets/TBL_Categoria')]",
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LOAD CLIENTE SCD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "SCD CLIENTE",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "UPDATE_CLIENTE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SILVERCLIENTE": {},
									"dimCLIENTESCD": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "treinamento/staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/UPDATE_CLIENTE')]",
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CATEGORIA')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureOLTP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_CATEGORIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NOME_CATEGORIA",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CATEGORIA"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureOLTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CIDADE')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureOLTP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_CIDADE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NOME_CIDADE",
						"type": "varchar"
					},
					{
						"name": "UF",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CIDADE"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureOLTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CLIENTE')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureOLTP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_CLIENTE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NOME_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "ENDERECO",
						"type": "varchar"
					},
					{
						"name": "NUMERO",
						"type": "varchar"
					},
					{
						"name": "ID_CIDADE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CEP",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CLIENTE"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureOLTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CLIENTEscd')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ID_CLIENTE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NOME_CLIENTE",
						"type": "nvarchar"
					},
					{
						"name": "ENDERECO",
						"type": "nvarchar"
					},
					{
						"name": "NUMERO",
						"type": "nvarchar"
					},
					{
						"name": "ID_CIDADE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CEP",
						"type": "nvarchar"
					},
					{
						"name": "InsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "HashKey",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SILVER_CLIENTE_SCD"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CRMATE170')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ID_CATEGORIA",
						"type": "INT32"
					},
					{
						"name": "NOME_CATEGORIA",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CRM_CSV')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CRM.csv",
						"folderPath": "bronze/carros",
						"fileSystem": "treinamento"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "primeiro_nome",
						"type": "String"
					},
					{
						"name": "ultimo_nome",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					},
					{
						"name": "sexo",
						"type": "String"
					},
					{
						"name": "cidade",
						"type": "String"
					},
					{
						"name": "pais",
						"type": "String"
					},
					{
						"name": "codigo_pais",
						"type": "String"
					},
					{
						"name": "Time_zone",
						"type": "String"
					},
					{
						"name": "empresa",
						"type": "String"
					},
					{
						"name": "profissao",
						"type": "String"
					},
					{
						"name": "etnia",
						"type": "String"
					},
					{
						"name": "idioma",
						"type": "String"
					},
					{
						"name": "montadora",
						"type": "String"
					},
					{
						"name": "carro",
						"type": "String"
					},
					{
						"name": "ano",
						"type": "String"
					},
					{
						"name": "nascimento",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_lxc')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "bronze",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IR_CATEGORIA')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "NUM_VENDA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DATA_VENDA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ID_CLIENTE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID_VENDEDOR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "STATUS",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "VENDAS"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PRODUTO')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureOLTP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_PROD",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NOME_PRODUTO",
						"type": "varchar"
					},
					{
						"name": "ID_CATEGORIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "PRECO",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PRODUTOS"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureOLTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SAIDA_VENDAS_PARQUET_PART')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "gold/",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SRT_VENDAS_ITENS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "RAW"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/vendas_itens",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_CATEGORIA')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "RAW"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/categoria",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_CIDADE')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "RAW"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/cidade",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_CLIENTE')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "RAW"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/cliente",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_PRODUTOS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "RAW"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/produtos",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_UNIDADE')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "RAW"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/unidade",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_VENDAS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "RAW"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/vendas",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_VENDEDORES')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "RAW"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/vendedores",
						"fileSystem": "treinamento"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_lxc')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureOLTP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureOLTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TBL_Categoria')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "ID_CATEGORIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NOME_CATEGORIA",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "SILVER",
					"table": "D_BULK_CATEGORIA"
				},
				"sqlPool": {
					"referenceName": "dw01",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/dw01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UNIDADE')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureOLTP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "DESC_UNIDADE",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "UNIDADE"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureOLTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VENDAS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureOLTP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "NUM_VENDA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DATA_VENDA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ID_CLIENTE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID_VENDEDOR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "STATUS",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "VENDAS"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureOLTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VENDAS_ITENS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureOLTP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "NUM_VENDA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NUM_SEQ",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID_PROD",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QTDE",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "VAL_UNIT",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "VAL_TOTAL",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "VENDA_ITENS"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureOLTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VENDEDORES')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureOLTP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_VENDEDOR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NOME_VENDEDOR",
						"type": "varchar"
					},
					{
						"name": "SALARIO",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "VENDEDORES"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureOLTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VW_VENDAS_SL')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultSqlServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": "database1"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "vendas"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/crmacima1970')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze",
						"fileSystem": "treinamento"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id;primeiro_nome;ultimo_nome;email;sexo;cidade;pais;codigo_pais;Time_zone;empresa;profissao;etnia;idioma;montadora;carro;ano;nascimento",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/vendas_cdc')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"triggerStart": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(formatDateTime(dataset().triggerStart,'yyyyMMddHHmmssfff'),'.parquet')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('minierp/vendas/incremental/parquet/',formatDateTime(dataset().triggerStart,'yyyy/MM/dd'))",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureOLTP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureOLTP_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SRV-ANDRE-99",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SRV-ANDRE-99')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asa-trn-99-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asa-trn-99-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asa-trn-99-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asa-trn-99-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CARGA_RAW')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2022-09-09T22:37:00",
						"timeZone": "E. South America Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SRV-ANDRE-99')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CARGA_CRM')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CRM_CSV",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CRMATE170",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "crmacima1970",
								"type": "DatasetReference"
							},
							"name": "sink2",
							"rejectedDataLinkedService": {
								"referenceName": "asa-trn-99-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "ATE1970"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          primeiro_nome as string,",
						"          ultimo_nome as string,",
						"          email as string,",
						"          sexo as string,",
						"          cidade as string,",
						"          pais as string,",
						"          codigo_pais as string,",
						"          Time_zone as string,",
						"          empresa as string,",
						"          profissao as string,",
						"          etnia as string,",
						"          idioma as string,",
						"          montadora as string,",
						"          carro as string,",
						"          ano as integer,",
						"          nascimento as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          primeiro_nome,",
						"          ultimo_nome,",
						"          pais,",
						"          carro,",
						"          ano",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 split(ano<=1970,",
						"     ano>1970,",
						"     disjoint: false) ~> ATE1970@(ATE1970, ACIMA1970)",
						"ATE1970@ATE1970 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CATEGORIA as integer,",
						"          NOME_CATEGORIA as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['crmate1970.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"ATE1970@ACIMA1970 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {id;primeiro_nome;ultimo_nome;email;sexo;cidade;pais;codigo_pais;Time_zone;empresa;profissao;etnia;idioma;montadora;carro;ano;nascimento} as string",
						"     ),",
						"     partitionFileNames:['crmacima1970'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CRM_CSV')]",
				"[concat(variables('workspaceId'), '/datasets/CRMATE170')]",
				"[concat(variables('workspaceId'), '/linkedServices/asa-trn-99-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/datasets/crmacima1970')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPDATE_CLIENTE')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CLIENTE",
								"type": "DatasetReference"
							},
							"name": "SILVERCLIENTE"
						},
						{
							"dataset": {
								"referenceName": "CLIENTEscd",
								"type": "DatasetReference"
							},
							"name": "dimCLIENTESCD"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CLIENTEscd",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "createclientehash"
						},
						{
							"name": "exists1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "SetDatas"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_CLIENTE as integer,",
						"          NOME_CLIENTE as string,",
						"          ENDERECO as string,",
						"          NUMERO as string,",
						"          ID_CIDADE as integer,",
						"          CEP as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SILVERCLIENTE",
						"source(output(",
						"          ID_CLIENTE as integer,",
						"          NOME_CLIENTE as string,",
						"          ENDERECO as string,",
						"          NUMERO as string,",
						"          ID_CIDADE as integer,",
						"          CEP as string,",
						"          InsertedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          HashKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> dimCLIENTESCD",
						"SILVERCLIENTE derive(HashKey = sha2(256,\r",
						"iifNull(toString(ID_CLIENTE),'')+\r",
						"iifNull(NOME_CLIENTE,'')+\r",
						"iifNull(ENDERECO,'')+\r",
						"iifNull(NUMERO,'')+\r",
						"iifNull(toString(ID_CIDADE),'')+\r",
						"iifNull(toString(CEP),'')\r",
						")) ~> createclientehash",
						"createclientehash, dimCLIENTESCD exists(createclientehash@HashKey == dimCLIENTESCD@HashKey,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1, dimCLIENTESCD lookup(SILVERCLIENTE@ID_CLIENTE == dimCLIENTESCD@ID_CLIENTE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(InsertedDate = iif(isNull(InsertedDate), currentTimestamp(), InsertedDate),",
						"          ModifiedDate = currentTimestamp()) ~> SetDatas",
						"SetDatas alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CLIENTE as integer,",
						"          NOME_CLIENTE as string,",
						"          ENDERECO as string,",
						"          NUMERO as string,",
						"          ID_CIDADE as integer,",
						"          CEP as string,",
						"          InsertedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          HashKey as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_CLIENTE'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_CLIENTE = SILVERCLIENTE@ID_CLIENTE,",
						"          NOME_CLIENTE = SILVERCLIENTE@NOME_CLIENTE,",
						"          ENDERECO = SILVERCLIENTE@ENDERECO,",
						"          NUMERO = SILVERCLIENTE@NUMERO,",
						"          ID_CIDADE = SILVERCLIENTE@ID_CIDADE,",
						"          CEP = SILVERCLIENTE@CEP,",
						"          InsertedDate,",
						"          ModifiedDate,",
						"          HashKey = createclientehash@HashKey",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CLIENTE')]",
				"[concat(variables('workspaceId'), '/datasets/CLIENTEscd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/00_CREATE_DB')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "CREATE DATABASE LHDW",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_CRIA SCHEMAS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "-- CRIAR SCHEMAS CAMADAS MEDALLION\nCREATE SCHEMA BRONZE\nGO\nCREATE SCHEMA SILVER\nGO\nCREATE SCHEMA GOLD\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_CRIA_DW')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "--CRIADO PELO MANAGE SQL POOLS",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_RLS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03_FEATURES_DEDICADO"
				},
				"content": {
					"query": "\n--RLS\n/*A. Cenário para usuários que se autenticam no banco de dados\nEste exemplo cria três usuários e cria e preenche uma tabela com seis linhas. Em seguida, ele cria uma função com valor de tabela embutida e uma política de segurança para a tabela. O exemplo mostra como as instruções select são filtradas para os vários usuários.\nref https://docs.microsoft.com/pt-br/sql/relational-databases/security/row-level-security?context=%2Fazure%2Fsynapse-analytics%2Fcontext%2Fcontext&view=sql-server-ver16\n*/\n\n--Crie três contas de usuário que demonstrarão diferentes recursos de acesso.\n\nCREATE USER gerente WITHOUT LOGIN;  \nCREATE USER vendedor1 WITHOUT LOGIN;  \nCREATE USER vendedor2 WITHOUT LOGIN;\nGO\n\n/*\nCrie uma tabela para armazenar dados.\n*/\n\nCREATE SCHEMA vendas\nGO\nCREATE TABLE vendas.pedidos \n    (  \n    PedidoID int,  \n    Vendedor nvarchar(50),  \n    Produto nvarchar(50),  \n    Quantidade smallint  \n    );\n\n/*\nPreencha a tabela com seis linhas de dados, mostrando três pedidos para cada representante de vendas.\n */ \n\nINSERT INTO vendas.pedidos  VALUES (1, 'vendedor1', 'Coca-Cola', 5);\nINSERT INTO vendas.pedidos  VALUES (2, 'vendedor1', 'Fanta', 2);\nINSERT INTO vendas.pedidos  VALUES (3, 'vendedor1', 'Coca-Cola', 4);\nINSERT INTO vendas.pedidos  VALUES (4, 'vendedor2', 'Fanta', 2);\nINSERT INTO vendas.pedidos  VALUES (5, 'vendedor2', 'Fanta', 5);\nINSERT INTO vendas.pedidos  VALUES (6, 'vendedor2', 'Coca-Cola', 5);\n\n-- Analise insert\nSELECT * FROM vendas.pedidos ;\n\n--Conceda acesso de leitura na tabela a cada um dos usuários.\nGRANT SELECT ON vendas.pedidos  TO gerente;  \nGRANT SELECT ON vendas.pedidos  TO vendedor1;  \nGRANT SELECT ON vendas.pedidos  TO vendedor2; \nGO\n/*\nCrie um novo esquema e uma função com valor de tabela embutida. \nA função retorna 1 quando uma linha na coluna vendedor é igual ao usuário que executa a \nconsulta ( @vendedor = USER_NAME()) ou se o usuário que executa a consulta é o usuário Gerente\n ( USER_NAME() = 'gerente').\n*/\nCREATE SCHEMA seguranca;  \nGO  \n  \nCREATE FUNCTION seguranca.tvf_segurancapredicada(@vendedor AS nvarchar(50))  \n    RETURNS TABLE  \nWITH SCHEMABINDING  \nAS  \n    RETURN SELECT 1 AS tvf_segurancapredicada_result\nWHERE @vendedor = USER_NAME() OR USER_NAME() = 'gerente';  \nGO\n\n/*\nCrie uma política de segurança adicionando a função como um predicado de filtro. \nO estado deve ser definido como ON para habilitar a política.\n*/\n\nCREATE SECURITY POLICY FiltroVendas\nADD FILTER PREDICATE seguranca.tvf_segurancapredicada(Vendedor)\nON vendas.pedidos\nWITH (STATE = ON);  \nGO\n\n--Permitir permissões SELECT para a função fn_securitypredicate\nGRANT SELECT ON seguranca.tvf_segurancapredicada TO gerente;  \nGRANT SELECT ON seguranca.tvf_segurancapredicada TO vendedor1;  \nGRANT SELECT ON seguranca.tvf_segurancapredicada TO vendedor2;\n\nAgora teste o predicado de filtragem, selecionando na tabela Sales como cada usuário.\nEXECUTE AS USER = 'vendedor1';  \nSELECT * FROM vendas.pedidos;\nREVERT;  \n  \nEXECUTE AS USER = 'vendedor2';  \nSELECT * FROM vendas.pedidos;\nREVERT;  \n  \nEXECUTE AS USER = 'gerente';  \nSELECT * FROM vendas.pedidos;\nREVERT;\n\n--Altere a política de segurança para desativá-la.\nALTER SECURITY POLICY FiltroVendas  \nWITH (STATE = OFF);\n\n--Conecte-se ao banco de dados SQL para limpar recursos\nDROP USER vendedor1;\nDROP USER vendedor2;\nDROP USER gerente;\n\nDROP SECURITY POLICY FiltroVendas;\nDROP TABLE vendas.pedidos;\nDROP FUNCTION seguranca.tvf_segurancapredicada;\nDROP SCHEMA seguranca;\nDROP SCHEMA vendas;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02 SCHEMA DEDICADO')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "CREATE SCHEMA BRONZE\nGO\nCREATE SCHEMA SILVER\nGO\nCREATE SCHEMA GOLD",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_CLS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03_FEATURES_DEDICADO"
				},
				"content": {
					"query": "/*\nref\nhttps://docs.microsoft.com/pt-br/azure/synapse-analytics/sql-data-warehouse/column-level-security?context=%2Fazure%2Fsynapse-analytics%2Fcontext%2Fcontext&view=sql-server-ver16\nSegurança a nivel de coluna\nSegurança de Nível de Coluna permite que os clientes controlem o acesso às colunas da tabela com \nbase no contexto de execução do usuário ou associação de grupo.\n*/\n\n--Crie a tabela Memboros com a coluna CPF usada para armazenar números de CADASTRO DE PESSOA FÍSICA.:\n\nCREATE TABLE membros\n  (membroID int IDENTITY,\n   Nome varchar(100) NULL,\n   CPF char(14) NOT NULL,\n   Sobrenome varchar(100) NOT NULL,\n   telefone varchar(12) NULL,\n   Email varchar(100) NULL);\n\n--Cria usuarios para teste\n--Crie três contas de usuário que demonstrarão diferentes recursos de acesso.\n\nCREATE USER gerente WITHOUT LOGIN;  \nCREATE USER estagiario WITHOUT LOGIN;  \n\n--Permita que estagiario acesse todas as colunas, exceto a coluna CPF, que tem os dados confidenciais:\n\nGRANT SELECT ON membros(membroID, Nome, Sobrenome, telefone, Email) TO estagiario;\n\n--Teste estagiario\nEXECUTE AS USER = 'estagiario';  \nSELECT * FROM membros;\nREVERT; \n\n--Teste estagiario\nEXECUTE AS USER = 'gerente';  \nSELECT * FROM membros;\nREVERT; ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_CRIA_FORMATO_EXTERNO_PARQUET')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "-- CRIA FORMATO PARQUET\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'ParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [ParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n--CRIA FORMATO CSV SKIP CABECALHO\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'skipHeader_CSV') \nCREATE EXTERNAL FILE FORMAT skipHeader_CSV\nWITH (FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS(\n          FIELD_TERMINATOR = ',',\n          STRING_DELIMITER = '\"',\n          FIRST_ROW = 2, \n          USE_TYPE_DEFAULT = True)\n)\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_CRIAR_CREDENCIAL')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "-- Create master key in databases with some password (one-off per database)\nUSE LHDW;\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'TREINAMENTOSOLAR2022@!'\nGO\n\n--CRIAÇÃO DE CREDENTIAL\n--Entrar no datalake e gerar chave SAS\nUSE LHDW;\nCREATE DATABASE SCOPED CREDENTIAL SASADLSTRNSOLAR\n WITH IDENTITY = 'SHARED ACCESS SIGNATURE',\n--GERADO SECRET VIA SAS\n SECRET = '?sv=2021-06-08&ss=bf&srt=sc&sp=rwdlacyx&se=2022-11-02T01:12:12Z&st=2022-09-12T17:12:12Z&spr=https&sig=2hgFfD4fo8kcmkztQ6l7t413%2BHZkR%2BTJLm68wuJH4C4%3D'\n GO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_CRIA_USER')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "-- cria login\ncreate login [bruno.galvincio@dataex.com.br] from external provider\nGO\n\n-- cria usuario\nuse DW01\n\nCREATE user [bruno.galvincio@dataex.com.br] from login [bruno.galvincio@dataex.com.br]\nGO\n-- add role\nalter ROLE db_owner ADD MEMBER [bruno.galvincio@dataex.com.br]\n\n--adicionar contributor datalake",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_DDM')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03_FEATURES_DEDICADO"
				},
				"content": {
					"query": "    -------------------------------------------------------------------------Dynamic Data Masking (DDM)----------------------------------------------------------------------------------------------------------\n    /*  Dynamic data masking helps prevent unauthorized access to sensitive data by enabling customers\n        to designate how much of the sensitive data to reveal with minimal impact on the application layer.\n        Let see how */\n\n    /* Scenario: WWI has identified sensitive information in the CustomerInfo table. They would like us to \n        obfuscate the CreditCard and Email columns of the CustomerInfo table to DataAnalysts */\n\n    -- Step:1 Let us first get a view of CustomerInfo table.\n    SELECT TOP (100) * FROM wwi_security.CustomerInfo;\n\n    -- Step:2 Let's confirm that there are no Dynamic Data Masking (DDM) applied on columns.\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \n    FROM sys.masked_columns AS c  \n    JOIN sys.tables AS tbl\n        ON c.[object_id] = tbl.[object_id]  \n    WHERE is_masked = 1\n        AND tbl.name = 'CustomerInfo';\n    -- No results returned verify that no data masking has been done yet.\n\n    -- Step:3 Now lets mask 'CreditCard' and 'Email' Column of 'CustomerInfo' table.\n    ALTER TABLE wwi_security.CustomerInfo  \n    ALTER COLUMN [CreditCard] ADD MASKED WITH (FUNCTION = 'partial(0,\"XXXX-XXXX-XXXX-\",4)');\n    GO\n    ALTER TABLE wwi_security.CustomerInfo\n    ALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');\n    GO\n    -- The columns are sucessfully masked.\n\n    -- Step:4 Let's see Dynamic Data Masking (DDM) applied on the two columns.\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \n    FROM sys.masked_columns AS c  \n    JOIN sys.tables AS tbl\n        ON c.[object_id] = tbl.[object_id]  \n    WHERE is_masked = 1\n        AND tbl.name ='CustomerInfo';\n\n    -- Step:5 Now, let us grant SELECT permission to 'DataAnalystMiami' on the 'CustomerInfo' table.\n   GRANT SELECT ON wwi_security.CustomerInfo TO DataAnalystMiami;  \n\n    -- Step:6 Logged in as  'DataAnalystMiami' let us execute the select query and view the result.\n    EXECUTE AS USER = 'DataAnalystMiami';  \n    SELECT * FROM wwi_security.CustomerInfo;\n\n    -- Step:7 Let us remove the data masking using UNMASK permission\n    GRANT UNMASK TO DataAnalystMiami;\n    EXECUTE AS USER = 'DataAnalystMiami';  \n    SELECT *\n    FROM wwi_security.CustomerInfo;\n    revert;\n    REVOKE UNMASK TO DataAnalystMiami;  \n\n    ----step:8 Reverting all the changes back to as it was.\n    ALTER TABLE wwi_security.CustomerInfo\n    ALTER COLUMN CreditCard DROP MASKED;\n    GO\n    ALTER TABLE wwi_security.CustomerInfo\n    ALTER COLUMN Email DROP MASKED;\n    GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_CREATE_EXTERNAR_USERS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "-- cria login\ncreate login [bruno.galvincio@dataex.com.br] from external provider\nGO\n\n-- cria usuario\nuse lhdw\n\nCREATE user [bruno.galvincio@dataex.com.br] from login [bruno.galvincio@dataex.com.br]\nGO\n-- add role\nalter ROLE db_owner ADD MEMBER [bruno.galvincio@dataex.com.br]\n\n--adicionar contributor datalake\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_CRIA_FORMATO')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'ParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [ParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_CRIA_EXT_DS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'treinamento_adlstrnsolar99_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [treinamento_adlstrnsolar99_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net' \n\t)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_CRIA_FONTE_EXTERNA')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "\n\n-- PARA USERS INTERNOS -<\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources \nWHERE name = 'treinamento_adlstrnsolar99_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [treinamento_adlstrnsolar99_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net' \n\t)\nGO\n\n\n--PARA USER EXTERNOS ->\n--Entrar no datalake e gerar chave SAS\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources \nWHERE name = 'treinamento_adlstrnsolar99_dfs_core_windows_net_ext') \n\tCREATE EXTERNAL DATA SOURCE [treinamento_adlstrnsolar99_dfs_core_windows_net_ext] \n\tWITH (\n\t\tLOCATION = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net',\n\t\tCREDENTIAL=[SASADLSTRNSOLAR]\n\t)\nGO\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06_CRIA_TABELA_EXTERNA_CATEGORIA')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "\n--DROP EXTERNAL TABLE SILVER.D_CATEGORIA\nCREATE EXTERNAL TABLE SILVER.D_CATEGORIA (\n\t[ID_CATEGORIA] int,\n\t[NOME_CATEGORIA] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'silver/categoria/*.parquet',\n\tDATA_SOURCE = [treinamento_adlstrnsolar99_dfs_core_windows_net],\n\tFILE_FORMAT = [ParquetFormat]\n\t)\nGO\n\n--select * from SILVER.D_CATEGORIA\n\n-- SELECT * FROM SILVER.D_CATEGORIA\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06_EXTERNA_DEDICADA_CATEGORIA')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "CREATE EXTERNAL TABLE SILVER.[D_EXT_CATEGORIA1]\n(\n\t[ID_CATEGORIA] [int]  NOT NULL,\n\t[NOME_CATEGORIA] [varchar](20) NOT NULL\n)\nWITH\n(\n\tLOCATION = '/silver/categoria',\n\tDATA_SOURCE = [treinamento_adlstrnsolar99_dfs_core_windows_net],\n\tFILE_FORMAT = [ParquetFormat]\n)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/07_CRIA_TABELA_D_CATEGORIA')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'D_BULK_CATEGORIA' AND O.TYPE = 'U' AND S.NAME = 'SILVER')\nCREATE TABLE SILVER.D_BULK_CATEGORIA\n\t(\n\t [ID_CATEGORIA] int,\n\t [NOME_CATEGORIA] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = REPLICATE,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_D_BULK_CATEGORIA\n--AS\n--BEGIN\n\nCOPY INTO SILVER.D_BULK_CATEGORIA\n(ID_CATEGORIA 1, NOME_CATEGORIA 2)\nFROM 'https://adlstrnsolar99.dfs.core.windows.net/treinamento/silver/categoria'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM SILVER.D_BULK_CATEGORIA\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/07_CRIA_TABELA_EXTERNA_CIDADES')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "\n-- IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n-- \tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n-- \tWITH ( FORMAT_TYPE = PARQUET)\n-- GO\n\n-- IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'treinamento_adlstrnsolar99_dfs_core_windows_net') \n-- \tCREATE EXTERNAL DATA SOURCE [treinamento_adlstrnsolar99_dfs_core_windows_net] \n-- \tWITH (\n-- \t\tLOCATION = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net' \n-- \t)\n-- GO\n\n-- DROP EXTERNAL TABLE SILVER.D_CIDADE\nCREATE EXTERNAL TABLE SILVER.D_CIDADE (\n\t[ID_CIDADE] int,\n\t[NOME_CIDADE] nvarchar(4000),\n\t[UF] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'silver/cidade/*.parquet',\n\tDATA_SOURCE = [treinamento_adlstrnsolar99_dfs_core_windows_net],\n\tFILE_FORMAT = [ParquetFormat]\n\t)\nGO\n\n--SELECT * FROM SILVER.D_CIDADE",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/08_CRIA_EXTERNAL_TABLE_CLIENTE')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "--DROP EXTERNAL TABLE SILVER.D_CLIENTE\nCREATE EXTERNAL TABLE SILVER.D_CLIENTE (\n\t[ID_CLIENTE] int,\n\t[NOME_CLIENTE] nvarchar(4000),\n\t[ENDERECO] nvarchar(4000),\n\t[NUMERO] nvarchar(4000),\n\t[ID_CIDADE] int,\n\t[CEP] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'silver/cliente/**',\n\tDATA_SOURCE = [treinamento_adlstrnsolar99_dfs_core_windows_net],\n\tFILE_FORMAT = [ParquetFormat]\n\t)\nGO\n\n--SELECT * FROM  SILVER.D_CLIENTE\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/08_CRIA_TABELA_D_CIDADE')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'D_CIDADE' AND O.TYPE = 'U' AND S.NAME = 'SILVER')\nCREATE TABLE SILVER.D_CIDADE\n\t(\n\t [ID_CIDADE] int,\n\t [NOME_CIDADE] nvarchar(4000),\n\t [UF] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = REPLICATE,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_D_CIDADE\n--AS\n--BEGIN\nCOPY INTO SILVER.D_CIDADE\n(ID_CIDADE 1, NOME_CIDADE 2, UF 3)\nFROM 'https://adlstrnsolar99.dfs.core.windows.net/treinamento/silver/cidade'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n\t,COMPRESSION = 'snappy'\n)\n--END\nGO\n\nSELECT TOP 100 * FROM SILVER.D_CIDADE\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/09_CRIA_EXTERNAL_TABLE_PRODUTOS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "--drop EXTERNAL TABLE SILVER.D_PRODUTOS\nCREATE EXTERNAL TABLE SILVER.D_PRODUTOS (\n\t[ID_PROD] int,\n\t[NOME_PRODUTO] nvarchar(4000),\n\t[ID_CATEGORIA] int,\n\t[ID_UNIDADE] nvarchar(4000),\n\t[PRECO] numeric(10,2)\n\t)\n\tWITH (\n\tLOCATION = 'silver/produtos/**',\n\tDATA_SOURCE = [treinamento_adlstrnsolar99_dfs_core_windows_net],\n\tFILE_FORMAT = [ParquetFormat]\n\t)\nGO\n\n--select * from SILVER.D_PRODUTOS",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/09_CRIA_TABELA_D_CLIENTE')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'SILVER_CLIENTE' AND O.TYPE = 'U' AND S.NAME = 'dbo')\nCREATE TABLE dbo.SILVER_CLIENTE\n\t(\n\t [ID_CLIENTE] int,\n\t [NOME_CLIENTE] nvarchar(4000),\n\t [ENDERECO] nvarchar(4000),\n\t [NUMERO] nvarchar(4000),\n\t [ID_CIDADE] int,\n\t [CEP] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_SILVER_CLIENTE\n--AS\n--BEGIN\nCOPY INTO dbo.SILVER_CLIENTE\n(ID_CLIENTE 1, NOME_CLIENTE 2, ENDERECO 3, NUMERO 4, ID_CIDADE 5, CEP 6)\nFROM 'https://adlstrnsolar99.dfs.core.windows.net/treinamento/silver/cliente'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM dbo.SILVER_CLIENTE\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_CRIA_TABELA_D_PRODUTOS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'D_PRODUTOS' AND O.TYPE = 'U' AND S.NAME = 'SILVER')\nCREATE TABLE SILVER.D_PRODUTOS\n\t(\n\t [ID_PROD] int,\n\t [NOME_PRODUTO] nvarchar(4000),\n\t [ID_CATEGORIA] int,\n\t [ID_UNIDADE] nvarchar(4000),\n\t [PRECO] numeric(10,2)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_D_PRODUTOS\n--AS\n--BEGIN\nCOPY INTO SILVER.D_PRODUTOS\n(ID_PROD 1, NOME_PRODUTO 2, ID_CATEGORIA 3, ID_UNIDADE 4, PRECO 5)\nFROM 'https://adlstrnsolar99.dfs.core.windows.net/treinamento/silver/produtos'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM SILVER.D_PRODUTOS\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_CRIA_TABELA_EXTERNA_UNIDADE')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "--DROP EXTERNAL TABLE SILVER.D_UNIDADE\nCREATE EXTERNAL TABLE SILVER.D_UNIDADE (\n\t[ID_UNIDADE] nvarchar(4000),\n\t[DESC_UNIDADE] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'silver/unidade/**',\n\tDATA_SOURCE = [treinamento_adlstrnsolar99_dfs_core_windows_net],\n\tFILE_FORMAT = [ParquetFormat]\n\t)\nGO\n\n--SELECT * FROM SILVER.D_UNIDADE ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_CRIA_TABELA_D_UNIDADE')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'D_UNIDADE' AND O.TYPE = 'U' AND S.NAME = 'SILVER')\nCREATE TABLE SILVER.D_UNIDADE\n\t(\n\t [ID_UNIDADE] nvarchar(4000),\n\t [DESC_UNIDADE] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_D_UNIDADE\n--AS\n--BEGIN\nCOPY INTO SILVER.D_UNIDADE\n(ID_UNIDADE 1, DESC_UNIDADE 2)\nFROM 'https://adlstrnsolar99.dfs.core.windows.net/treinamento/silver/unidade'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM SILVER.D_UNIDADE\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_CRIA_TABELA_EXTERNA_VENDEDORES')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "--drop EXTERNAL TABLE SILVER.D_VENDEDORES\nCREATE EXTERNAL TABLE SILVER.D_VENDEDORES (\n\t[ID_VENDEDOR] int,\n\t[NOME_VENDEDOR] nvarchar(4000),\n\t[SALARIO] numeric(10,2)\n\t)\n\tWITH (\n\tLOCATION = 'silver/vendedores/**',\n\tDATA_SOURCE = [treinamento_adlstrnsolar99_dfs_core_windows_net],\n\tFILE_FORMAT = [ParquetFormat]\n\t)\nGO\n--select * from SILVER.D_VENDEDORES",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_CRIA_TABELA_D_VENDEDORES')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'D_VENDEDORES' AND O.TYPE = 'U' AND S.NAME = 'SILVER')\nCREATE TABLE SILVER.D_VENDEDORES\n\t(\n\t [ID_VENDEDOR] int,\n\t [NOME_VENDEDOR] nvarchar(4000),\n\t [SALARIO] numeric(10,2)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_D_VENDEDORES\n--AS\n--BEGIN\nCOPY INTO SILVER.D_VENDEDORES\n(ID_VENDEDOR 1, NOME_VENDEDOR 2, SALARIO 3)\nFROM 'https://adlstrnsolar99.dfs.core.windows.net/treinamento/silver/vendedores'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM SILVER.D_VENDEDORES\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_CRIA_TABELA_EXTERNA_VENDAS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "-- DROP EXTERNAL TABLE SILVER.VENDAS\nCREATE EXTERNAL TABLE SILVER.VENDAS (\n\t[NUM_VENDA] int,\n\t[DATA_VENDA] datetime2(7),\n\t[ID_CLIENTE] int,\n\t[ID_VENDEDOR] int,\n\t[STATUS] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'silver/vendas/**',\n\tDATA_SOURCE = [treinamento_adlstrnsolar99_dfs_core_windows_net],\n\tFILE_FORMAT = [ParquetFormat]\n\t)\nGO\n\n--select * from SILVER.VENDAS",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_CRIA_FATO_VENDAS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'FATO_VENDAS' AND O.TYPE = 'U' AND S.NAME = 'GOLD')\nCREATE TABLE GOLD.FATO_VENDAS\n\t(\n\t [NUM_VENDA] int,\n\t [DATA_VENDA] datetime2(7),\n\t [ID_CLIENTE] int,\n\t [STATUS] nvarchar(4000),\n\t [ID_VENDEDOR] int,\n\t [NUM_SEQ] int,\n\t [ID_PROD] int,\n\t [QTDE] numeric(10,2),\n\t [VAL_UNIT] numeric(10,2),\n\t [VAL_TOTAL] numeric(10,2)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = HASH([NUM_VENDA]),\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_FATO_VENDAS\n--AS\n--BEGIN\nCOPY INTO GOLD.FATO_VENDAS\n(NUM_VENDA 1, DATA_VENDA 2, ID_CLIENTE 3, STATUS 4, ID_VENDEDOR 5, NUM_SEQ 6, ID_PROD 7, QTDE 8, VAL_UNIT 9, VAL_TOTAL 10)\nFROM 'https://adlstrnsolar99.dfs.core.windows.net/treinamento/gold/fato_vendas'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM GOLD.FATO_VENDAS\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_CRIA_TABELA_EXTERNA_VENDAS_ITENS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "-- drop EXTERNAL TABLE SILVER.VENDAS_ITENS \nCREATE EXTERNAL TABLE SILVER.VENDAS_ITENS (\n\t[NUM_VENDA] int,\n\t[NUM_SEQ] int,\n\t[ID_PROD] int,\n\t[QTDE] numeric(10,2),\n\t[VAL_UNIT] numeric(10,2),\n\t[VAL_TOTAL] numeric(10,2)\n\t)\n\tWITH (\n\tLOCATION = 'silver/venda_itens/**',\n\tDATA_SOURCE = [treinamento_adlstrnsolar99_dfs_core_windows_net],\n\tFILE_FORMAT = [ParquetFormat]\n\t)\nGO\n\n--select * from SILVER.VENDAS_ITENS \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_CLIENTE_SCD')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "--SQL DEDIDCADO\nCREATE TABLE dbo.SILVER_CLIENTE_SCD\n\t(\n\t [ID_CLIENTE] int,\n\t [NOME_CLIENTE] nvarchar(4000),\n\t [ENDERECO] nvarchar(4000),\n\t [NUMERO] nvarchar(4000),\n\t [ID_CIDADE] int,\n\t [CEP] nvarchar(4000),\n     [InsertedDate] [datetime] NOT NULL,\n     [ModifiedDate] [datetime] NOT NULL,\n     [HashKey] [char](64)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = REPLICATE,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_VW_FATO_VENDAS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "CREATE VIEW GOLD.[VW_FATO_VENDAS]\n\tAS \n\tSELECT A.NUM_VENDA,\n\t       A.DATA_VENDA,\n\t\t   A.ID_CLIENTE,\n\t\t   A.ID_VENDEDOR,\n\t\t   A.STATUS,\n\t\t   B.NUM_SEQ,\n\t\t   B.ID_PROD,\n\t\t   B.VAL_UNIT,\n\t\t   B.VAL_TOTAL\n\t\t   \tFROM SILVER.VENDAS A\n\tINNER JOIN SILVER.VENDAS_ITENS B\n\tON A.NUM_VENDA=B.NUM_VENDA\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_SELECT')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "\nSELECT TOP 10 * FROM  SILVER.D_CATEGORIA\nGO\nSELECT TOP 10 * FROM  SILVER.D_CIDADE\nGO\nSELECT TOP 10 * FROM  SILVER.D_CLIENTE\nGO\nSELECT TOP 10 * FROM SILVER.D_PRODUTOS\nGO\nSELECT TOP 10 * FROM  SILVER.D_UNIDADE\nGO\nSELECT TOP 10 * FROM  SILVER.D_VENDEDORES\nGO\nSELECT TOP 10 * FROM  SILVER.VENDAS\nGO\nSELECT TOP 10 * FROM SILVER.VENDAS_ITENS\nGO\nSELECT TOP 10 * FROM  SILVER.VW_UNIDADE\nGO\nSELECT TOP 10 * FROM  GOLD.VW_FATO_VENDAS\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_VERIFICAR_TABELA_DEFRAG')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "DBCC PDW_SHOWSPACEUSED('GOLD.FATO_VENDAS');",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_VW__UNIDADE')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "-- This is auto-generated code\nCREATE OR ALTER VIEW VW_UNIDADE\nAS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://adlstrnsolar99.dfs.core.windows.net/treinamento/silver/unidade/*.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/16_DROP_EXERTERNAL_TABS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE SILVER.D_CATEGORIA\nGO\nDROP EXTERNAL TABLE SILVER.D_CIDADE\nGO\nDROP EXTERNAL TABLE SILVER.D_CLIENTE\nGO\nDROP EXTERNAL TABLE SILVER.D_PRODUTOS\nGO\nDROP EXTERNAL TABLE SILVER.D_UNIDADE\nGO\nDROP EXTERNAL TABLE SILVER.D_VENDEDORES\nGO\nDROP EXTERNAL TABLE SILVER.VENDAS\nGO\nDROP EXTERNAL TABLE SILVER.VENDAS_ITENS\nGO\nDROP VIEW SILVER.VW_UNIDADE\nGO\nDROP VIEW GOLD.VW_FATO_VENDAS\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/16_VW_TAMANHO_TABELAS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "CREATE VIEW dbo.vTableSizes\nAS\nWITH base\nAS\n(\nSELECT\n GETDATE()                                                             AS  [execution_time]\n, DB_NAME()                                                            AS  [database_name]\n, s.name                                                               AS  [schema_name]\n, t.name                                                               AS  [table_name]\n, QUOTENAME(s.name)+'.'+QUOTENAME(t.name)                              AS  [two_part_name]\n, nt.[name]                                                            AS  [node_table_name]\n, ROW_NUMBER() OVER(PARTITION BY nt.[name] ORDER BY (SELECT NULL))     AS  [node_table_name_seq]\n, tp.[distribution_policy_desc]                                        AS  [distribution_policy_name]\n, c.[name]                                                             AS  [distribution_column]\n, nt.[distribution_id]                                                 AS  [distribution_id]\n, i.[type]                                                             AS  [index_type]\n, i.[type_desc]                                                        AS  [index_type_desc]\n, nt.[pdw_node_id]                                                     AS  [pdw_node_id]\n, pn.[type]                                                            AS  [pdw_node_type]\n, pn.[name]                                                            AS  [pdw_node_name]\n, di.name                                                              AS  [dist_name]\n, di.position                                                          AS  [dist_position]\n, nps.[partition_number]                                               AS  [partition_nmbr]\n, nps.[reserved_page_count]                                            AS  [reserved_space_page_count]\n, nps.[reserved_page_count] - nps.[used_page_count]                    AS  [unused_space_page_count]\n, nps.[in_row_data_page_count]\n    + nps.[row_overflow_used_page_count]\n    + nps.[lob_used_page_count]                                        AS  [data_space_page_count]\n, nps.[reserved_page_count]\n - (nps.[reserved_page_count] - nps.[used_page_count])\n - ([in_row_data_page_count]\n         + [row_overflow_used_page_count]+[lob_used_page_count])       AS  [index_space_page_count]\n, nps.[row_count]                                                      AS  [row_count]\nfrom\n    sys.schemas s\nINNER JOIN sys.tables t\n    ON s.[schema_id] = t.[schema_id]\nINNER JOIN sys.indexes i\n    ON  t.[object_id] = i.[object_id]\n    AND i.[index_id] <= 1\nINNER JOIN sys.pdw_table_distribution_properties tp\n    ON t.[object_id] = tp.[object_id]\nINNER JOIN sys.pdw_table_mappings tm\n    ON t.[object_id] = tm.[object_id]\nINNER JOIN sys.pdw_nodes_tables nt\n    ON tm.[physical_name] = nt.[name]\nINNER JOIN sys.dm_pdw_nodes pn\n    ON  nt.[pdw_node_id] = pn.[pdw_node_id]\nINNER JOIN sys.pdw_distributions di\n    ON  nt.[distribution_id] = di.[distribution_id]\nINNER JOIN sys.dm_pdw_nodes_db_partition_stats nps\n    ON nt.[object_id] = nps.[object_id]\n    AND nt.[pdw_node_id] = nps.[pdw_node_id]\n    AND nt.[distribution_id] = nps.[distribution_id]\nLEFT OUTER JOIN (select * from sys.pdw_column_distribution_properties where distribution_ordinal = 1) cdp\n    ON t.[object_id] = cdp.[object_id]\nLEFT OUTER JOIN sys.columns c\n    ON cdp.[object_id] = c.[object_id]\n    AND cdp.[column_id] = c.[column_id]\nWHERE pn.[type] = 'COMPUTE'\n)\n, size\nAS\n(\nSELECT\n   [execution_time]\n,  [database_name]\n,  [schema_name]\n,  [table_name]\n,  [two_part_name]\n,  [node_table_name]\n,  [node_table_name_seq]\n,  [distribution_policy_name]\n,  [distribution_column]\n,  [distribution_id]\n,  [index_type]\n,  [index_type_desc]\n,  [pdw_node_id]\n,  [pdw_node_type]\n,  [pdw_node_name]\n,  [dist_name]\n,  [dist_position]\n,  [partition_nmbr]\n,  [reserved_space_page_count]\n,  [unused_space_page_count]\n,  [data_space_page_count]\n,  [index_space_page_count]\n,  [row_count]\n,  ([reserved_space_page_count] * 8.0)                                 AS [reserved_space_KB]\n,  ([reserved_space_page_count] * 8.0)/1000                            AS [reserved_space_MB]\n,  ([reserved_space_page_count] * 8.0)/1000000                         AS [reserved_space_GB]\n,  ([reserved_space_page_count] * 8.0)/1000000000                      AS [reserved_space_TB]\n,  ([unused_space_page_count]   * 8.0)                                 AS [unused_space_KB]\n,  ([unused_space_page_count]   * 8.0)/1000                            AS [unused_space_MB]\n,  ([unused_space_page_count]   * 8.0)/1000000                         AS [unused_space_GB]\n,  ([unused_space_page_count]   * 8.0)/1000000000                      AS [unused_space_TB]\n,  ([data_space_page_count]     * 8.0)                                 AS [data_space_KB]\n,  ([data_space_page_count]     * 8.0)/1000                            AS [data_space_MB]\n,  ([data_space_page_count]     * 8.0)/1000000                         AS [data_space_GB]\n,  ([data_space_page_count]     * 8.0)/1000000000                      AS [data_space_TB]\n,  ([index_space_page_count]  * 8.0)                                   AS [index_space_KB]\n,  ([index_space_page_count]  * 8.0)/1000                              AS [index_space_MB]\n,  ([index_space_page_count]  * 8.0)/1000000                           AS [index_space_GB]\n,  ([index_space_page_count]  * 8.0)/1000000000                        AS [index_space_TB]\nFROM base\n)\nSELECT *\nFROM size\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/17_VERIFICAR_TABELAS_DEFRAG')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "--Para identificar quais tabelas têm distorção de dados maior de 10%:\nselect *\nfrom dbo.vTableSizes\nwhere two_part_name in\n    (\n    select two_part_name\n    from dbo.vTableSizes\n    where row_count > 0\n    group by two_part_name\n    having (max(row_count * 1.000) - min(row_count * 1.000))/max(row_count * 1.000) >= .10\n    )\norder by two_part_name, row_count\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/17_external_table_carros')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'ParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'treinamento_adlstrnsolar99_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [treinamento_adlstrnsolar99_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE silver.carros (\n\t[id] nvarchar(4000),\n\t[primeiro_nome] nvarchar(4000),\n\t[ultimo_nome] nvarchar(4000),\n\t[email] nvarchar(4000),\n\t[sexo] nvarchar(4000),\n\t[cidade] nvarchar(4000),\n\t[pais] nvarchar(4000),\n\t[codigo_pais] nvarchar(4000),\n\t[Time_zone] nvarchar(4000),\n\t[empresa] nvarchar(4000),\n\t[profissao] nvarchar(4000),\n\t[etnia] nvarchar(4000),\n\t[idioma] nvarchar(4000),\n\t[montadora] nvarchar(4000),\n\t[carro] nvarchar(4000),\n\t[nascimento] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'bronze/crm/output/**',\n\tDATA_SOURCE = [treinamento_adlstrnsolar99_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM silver.carros\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/18_RESUMO_ESPACO_TABELAS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "--Esta consulta retorna as linhas e o espaço por tabela. \n--Ele permite que você veja quais tabelas são suas maiores tabelas e se \n-- elas são de rodízio, replicadas ou distribuídas por hash. \n-- Nas tabelas distribuídas em hash, a consulta exibe a coluna de distribuição.\nSELECT\n     database_name\n,    schema_name\n,    table_name\n,    distribution_policy_name\n,      distribution_column\n,    index_type_desc\n,    COUNT(distinct partition_nmbr) as nbr_partitions\n,    SUM(row_count)                 as table_row_count\n,    SUM(reserved_space_GB)         as table_reserved_space_GB\n,    SUM(data_space_GB)             as table_data_space_GB\n,    SUM(index_space_GB)            as table_index_space_GB\n,    SUM(unused_space_GB)           as table_unused_space_GB\nFROM\n    dbo.vTableSizes\nGROUP BY\n     database_name\n,    schema_name\n,    table_name\n,    distribution_policy_name\n,      distribution_column\n,    index_type_desc\nORDER BY\n    table_reserved_space_GB desc\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/19_ESPACO_DISTRIBUICAO')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "--Espaço da tabela pelo tipo de distribuição\n\nSELECT\n     distribution_policy_name\n,    SUM(row_count)                as table_type_row_count\n,    SUM(reserved_space_GB)        as table_type_reserved_space_GB\n,    SUM(data_space_GB)            as table_type_data_space_GB\n,    SUM(index_space_GB)           as table_type_index_space_GB\n,    SUM(unused_space_GB)          as table_type_unused_space_GB\nFROM dbo.vTableSizes\nGROUP BY distribution_policy_name\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/20_ESPACO_INDEX')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "--Espaço da tabela pelo tipo de índice\n\nSELECT\n     index_type_desc\n,    SUM(row_count)                as table_type_row_count\n,    SUM(reserved_space_GB)        as table_type_reserved_space_GB\n,    SUM(data_space_GB)            as table_type_data_space_GB\n,    SUM(index_space_GB)           as table_type_index_space_GB\n,    SUM(unused_space_GB)          as table_type_unused_space_GB\nFROM dbo.vTableSizes\nGROUP BY index_type_desc\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/21_RESUMO_DISTRIBUICAO')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "--Resumo do espaço de distribuição\nSELECT\n    distribution_id\n,    SUM(row_count)                as total_node_distribution_row_count\n,    SUM(reserved_space_MB)        as total_node_distribution_reserved_space_MB\n,    SUM(data_space_MB)            as total_node_distribution_data_space_MB\n,    SUM(index_space_MB)           as total_node_distribution_index_space_MB\n,    SUM(unused_space_MB)          as total_node_distribution_unused_space_MB\nFROM dbo.vTableSizes\nGROUP BY     distribution_id\nORDER BY    distribution_id\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/99_DROP_FORMATO')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_SERVERLESS"
				},
				"content": {
					"query": "--VERIFICAR FORMATOS EXISTENTES\nSELECT * FROM sys.external_file_formats;  \n\n--ELIMINAR FORMATO EXISTENTE\nDROP EXTERNAL FILE FORMAT SynapseParquetFormat  ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "lhdw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/99_EXEMPLO_FATO')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "--REFERENCIA\n--https://github.com/MicrosoftDocs/azure-docs.pt-br/blob/master/articles/synapse-analytics/sql-data-warehouse/sql-data-warehouse-tables-distribute.md\nCREATE TABLE [dbo].[FactInternetSales_CustomerKey]\nWITH (  CLUSTERED COLUMNSTORE INDEX\n     ,  DISTRIBUTION =  HASH([CustomerKey])\n     ,  PARTITION       ( [OrderDateKey] RANGE RIGHT FOR VALUES (   20000101, 20010101, 20020101, 20030101\n                                                                ,   20040101, 20050101, 20060101, 20070101\n                                                                ,   20080101, 20090101, 20100101, 20110101\n                                                                ,   20120101, 20130101, 20140101, 20150101\n                                                                ,   20160101, 20170101, 20180101, 20190101\n                                                                ,   20200101, 20210101, 20220101, 20230101\n                                                                ,   20240101, 20250101, 20260101, 20270101\n                                                                ,   20280101, 20290101\n                                                                )\n                        )\n    )\nAS\nSELECT  *\nFROM    [dbo].[FactInternetSales]\nOPTION  (LABEL  = 'CTAS : FactInternetSales_CustomerKey')\n;\n\n--CRIAR ESTATISTICAS PARA NOVA TABELA\nCREATE STATISTICS [ProductKey] ON [FactInternetSales_CustomerKey] ([ProductKey]);\nCREATE STATISTICS [OrderDateKey] ON [FactInternetSales_CustomerKey] ([OrderDateKey]);\nCREATE STATISTICS [CustomerKey] ON [FactInternetSales_CustomerKey] ([CustomerKey]);\nCREATE STATISTICS [PromotionKey] ON [FactInternetSales_CustomerKey] ([PromotionKey]);\nCREATE STATISTICS [SalesOrderNumber] ON [FactInternetSales_CustomerKey] ([SalesOrderNumber]);\nCREATE STATISTICS [OrderQuantity] ON [FactInternetSales_CustomerKey] ([OrderQuantity]);\nCREATE STATISTICS [UnitPrice] ON [FactInternetSales_CustomerKey] ([UnitPrice]);\nCREATE STATISTICS [SalesAmount] ON [FactInternetSales_CustomerKey] ([SalesAmount]);\n\n--Rename the tables\nRENAME OBJECT [dbo].[FactInternetSales] TO [FactInternetSales_ProductKey];\nRENAME OBJECT [dbo].[FactInternetSales_CustomerKey] TO [FactInternetSales];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/99_ddm')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_SQL_DEDICADO"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'SILVER_CLIENTE_DDM' AND O.TYPE = 'U' AND S.NAME = 'dbo')\nCREATE TABLE dbo.SILVER_CLIENTE_DDM\n\t(\n\t [ID_CLIENTE] int,\n     [CPF] VARCHAR(14),\n     [EMAIL]VARCHAR(50),\n\t [NOME_CLIENTE] nvarchar(4000),\n\t [ENDERECO] nvarchar(4000),\n\t [NUMERO] nvarchar(4000),\n\t [ID_CIDADE] int,\n\t [CEP] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\nselect * from dbo.SILVER_CLIENTE_DDM\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ATIVAR_CDC')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "99_Outros"
				},
				"content": {
					"query": "--ATIVAR CDC\n\nUSE minierp    \nGO   EXEC sys.sp_cdc_enable_db   GO  ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyctlctutorial",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ler_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "99_Outros"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://adlstrnsolar99.dfs.core.windows.net/treinamento/silver/categoria/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01 DB Taxi Apache Spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_TAXI_ANALISE"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Cluster1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "a42f4abc-be60-424b-bde0-4538a8782830"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
						"name": "Cluster1",
						"type": "Spark",
						"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Criar um relatório do Power BI usando o Apache Spark e o Azure Synapse Analytics"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Execute as linhas a seguir para criar um dataframe do Spark, colando o código em uma nova célula. Isso recupera os dados por meio da API do Conjunto de Dados em Aberto no Azure. A extração de todos esses dados gera cerca de 1,5 bilhão de linhas. O exemplo de código a seguir usa start_date e end_date para aplicar um filtro que retorna um único mês de dados."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"from azureml.opendatasets import NycTlcYellow\r\n",
							"from dateutil import parser\r\n",
							"from datetime import datetime\r\n",
							"\r\n",
							"end_date = parser.parse('2018-06-06')\r\n",
							"start_date = parser.parse('2018-05-01')\r\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
							"filtered_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Usando o SQL do Apache Spark, criaremos um banco de dados chamado NycTlcTutorial. Usaremos esse banco de dados para armazenar os resultados do nosso processamento de dados."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							" spark.sql(\"CREATE DATABASE IF NOT EXISTS NycTlcTutorial\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Em seguida, usaremos as operações de dataframe do Spark para processar os dados. No seguinte código, executaremos as seguintes transformações:\r\n",
							"#### \r\n",
							"#### A remoção de colunas que não são necessárias.\r\n",
							"#### A remoção de exceções/valores incorretos por meio da filtragem.\r\n",
							"A criação de recursos, como tripTimeSecs e tipped, para análise adicional."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import unix_timestamp, date_format, col, when\r\n",
							"\r\n",
							"taxi_df = filtered_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\r\n",
							"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\r\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\r\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\r\n",
							"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\r\n",
							"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\r\n",
							"                                )\\\r\n",
							"                        .filter((filtered_df.passengerCount > 0) & (filtered_df.passengerCount < 8)\\\r\n",
							"                                & (filtered_df.tipAmount >= 0) & (filtered_df.tipAmount <= 25)\\\r\n",
							"                                & (filtered_df.fareAmount >= 1) & (filtered_df.fareAmount <= 250)\\\r\n",
							"                                & (filtered_df.tipAmount < filtered_df.fareAmount)\\\r\n",
							"                                & (filtered_df.tripDistance > 0) & (filtered_df.tripDistance <= 100)\\\r\n",
							"                                & (filtered_df.rateCodeId <= 5)\r\n",
							"                                & (filtered_df.paymentType.isin({\"1\", \"2\"})))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Por fim, salvaremos nosso dataframe usando o método saveAsTable do Apache Spark. Isso permitirá que você consulte a mesma tabela mais tarde e conecte-se a ela usando pools de SQL sem servidor."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"taxi_df.write.mode(\"overwrite\").saveAsTable(\"NycTlcTutorial.nyctaxi\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_CARGA_SILVER')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_POOL_SPARK/CASE 1 VENDAS"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Cluster1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "5",
						"spark.autotune.trackingId": "613e5165-6350-4428-a835-eb7e76d6a421"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
						"name": "Cluster1",
						"type": "Spark",
						"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### CRIA DATAFRAMES PARA CARGA CAMADA SILVER"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"dfcategoria = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/categoria/dbo.CATEGORIA.parquet', format='parquet')\r\n",
							"dfcidade = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/cidade/dbo.CIDADE.parquet', format='parquet')\r\n",
							"dfcliente = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/cliente/dbo.CLIENTE.parquet', format='parquet')\r\n",
							"dfprodutos = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/produtos/dbo.PRODUTOS.parquet', format='parquet')\r\n",
							"dfunidade = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/unidade/dbo.UNIDADE.parquet', format='parquet')\r\n",
							"dfvendedores = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/vendedores/dbo.VENDEDORES.parquet', format='parquet')\r\n",
							"dfvendas = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/vendas/dbo.VENDAS.parquet', format='parquet')\r\n",
							"dfvenda_itens = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/vendas_itens/dbo.VENDA_ITENS.parquet', format='parquet')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### GRAVANDO PARQUET DE BRONZE PARA SILVER"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"##Escreve e salva arquivo Parquet\r\n",
							"dfcategoria.write.mode('overwrite').parquet(\"/silver/categoria\")\r\n",
							"dfcidade.write.mode('overwrite').parquet(\"/silver/cidade\")\r\n",
							"dfcliente.write.mode('overwrite').parquet(\"/silver/cliente\")\r\n",
							"dfprodutos.write.mode('overwrite').parquet(\"/silver/produtos\")\r\n",
							"dfunidade.write.mode('overwrite').parquet(\"/silver/unidade\")\r\n",
							"dfvendedores.write.mode('overwrite').parquet(\"/silver/vendedores\")\r\n",
							"dfvendas.write.mode('overwrite').parquet(\"/silver/vendas\")\r\n",
							"dfvenda_itens.write.mode('overwrite').parquet(\"/silver/venda_itens\")"
						],
						"outputs": [],
						"execution_count": 9
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_CRIA_DW')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04_SQL_DEDICADO"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a79a7b69-a214-4d4e-b47f-29a87b2290de"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_CRIA_TABELA_SPARK')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Cluster1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "65d1ab29-9afa-4742-8d91-ae215750487d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
						"name": "Cluster1",
						"type": "Spark",
						"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/categoria/*.parquet', format='parquet')\r\n",
							"df.write.mode(\"overwrite\").saveAsTable(\"default.D_CATEGORIA\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.sql(\"SELECT * FROM `default`.`d_categoria`\")\r\n",
							"df.show(10)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#LIMPAR CACHE\r\n",
							"df.unpersist()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_CRIA_USER')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04_SQL_DEDICADO"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "957f2b22-bdeb-4bfd-bac6-78ba9e405732"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_FATO_VENDAS')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_POOL_SPARK/CASE 1 VENDAS"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Cluster1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "aa7c497c-521d-4884-a348-528639cc54dd"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
						"name": "Cluster1",
						"type": "Spark",
						"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### CARGA FATO PARQUET"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"dfvendas = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/silver/vendas/*.parquet', format='parquet')\r\n",
							"dfvenda_itens = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/silver/venda_itens/*.parquet', format='parquet')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfvendas.show(10)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfvenda_itens.show(10)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Join Parquet vendas e vendas itens"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark \r\n",
							"from pyspark.sql.functions import to_timestamp,date_format\r\n",
							"from pyspark.sql.functions import col\r\n",
							"join_fato_vendas = dfvendas.join(dfvenda_itens, dfvendas.NUM_VENDA == dfvenda_itens.NUM_VENDA)\\\r\n",
							".select(dfvendas.NUM_VENDA,dfvendas.DATA_VENDA,dfvendas.ID_CLIENTE,dfvendas.STATUS,dfvendas.ID_VENDEDOR\\\r\n",
							",dfvenda_itens.NUM_SEQ,dfvenda_itens.ID_PROD,dfvenda_itens.QTDE,dfvenda_itens.VAL_UNIT\\\r\n",
							",dfvenda_itens.VAL_TOTAL\\\r\n",
							"#,date_format('DATA_VENDA','yyyyMMdd').cast('Int').alias('DATA_VENDA_KEY')\\\r\n",
							"#,date_format('DATA_VENDA','yyyyMMdd').cast('String').alias('DATA_VENDA_CHAVE')\\\r\n",
							",date_format('DATA_VENDA','yyyyMMdd').alias('DATA_VENDA_CHAVE')\\\r\n",
							",date_format('DATA_VENDA','yyyy').alias('ANO')\\\r\n",
							",date_format('DATA_VENDA','MM').alias('MES')\\\r\n",
							",date_format('DATA_VENDA','dd').alias('DIA')\\\r\n",
							")\r\n",
							"join_fato_vendas.show(10)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#verificando schema dp dataframe\r\n",
							"join_fato_vendas.schema"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### FILTRAR VENDAS STATUS \"N\""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"join_filtrado = join_fato_vendas.filter(join_fato_vendas.STATUS=='N')\r\n",
							"join_filtrado.show(10)"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"join_filtrado.schema"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### SALVAR ARQUIVO PARQUER PARTICIONADO ANO/MES"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"##Escreve e salva arquivo Parquet particionado por ano\r\n",
							"join_filtrado.write.partitionBy('ANO','MES').mode('overwrite').parquet(\"/gold/fato_vendas\")"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Salvar Tabela Spark"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"#df = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/categoria/*.parquet', format='parquet')\r\n",
							"join_fato_vendas.write.mode(\"overwrite\").saveAsTable(\"default.FATO_VENDA\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT * FROM default.FATO_VENDA"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_LOAD_CRM')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_POOL_SPARK/CASE 2 CRM"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Cluster1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "ab3ac17c-95d2-4856-86d2-48a500ca19ae"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
						"name": "Cluster1",
						"type": "Spark",
						"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/carros/CRM.csv', format='csv',\r\n",
							"delimiter=\";\",\r\n",
							"header=True\r\n",
							")\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_spark_create_gold_trip_data_green_agg')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02_TAXI_ANALISE"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Cluster1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "8fe76a1c-1b20-4101-af14-a5f6d8253d99"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
						"name": "Cluster1",
						"type": "Spark",
						"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Trip Data Aggregation \n",
							"### Group By Columns\n",
							"1. year\n",
							"2. Month\n",
							"3. Pickup Location ID\n",
							"4. Drop Off Location ID\n",
							"\n",
							"### Aggregated Columns\n",
							"1. Total Trip Count\n",
							"2. Total Fare Amount\n",
							"\n",
							"### Objetivo no notebook\n",
							"\n",
							"Demonstrar a integração entre o  Spark Pool e Serverless SQL Pool\n",
							"\n",
							"1. Cria uma tabela agregada in Spark Pool\n",
							"2. Acesso os dados do Serverless SQL Pool "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Defina os caminhos da pasta para que possam ser usados mais tarde.\n",
							"bronze_folder_path = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze'\n",
							"silver_folder_path = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/silver'\n",
							"gold_folder_path = 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/gold'"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Defina a spark  config para ser capaz de obter as colunas particionadas ano e mês como strings em vez de inteiros.\n",
							"spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"\n",
							"-- Criar banco de dados para o qual vamos gravar os dados\n",
							"\n",
							"CREATE DATABASE IF NOT EXISTS nyc_taxi_ldw_spark\n",
							"LOCATION 'abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/gold';"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Leia os dados da camada prata prata a serem processados.\n",
							"trip_data_green_df = spark.read.parquet(f\"{silver_folder_path}/trip_data_green\") "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform the required aggregations\n",
							"# 1. Total trip count\n",
							"# 2. Total fare amount\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"trip_data_green_agg_df = trip_data_green_df \\\n",
							"                        .groupBy(\"year\", \"month\", \"pu_location_id\", \"do_location_id\") \\\n",
							"                        .agg(count(lit(1)).alias(\"total_trip_count\"),\n",
							"                        round(sum(\"fare_amount\"), 2).alias(\"total_fare_amount\"))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write the aggregated data to the gold table for consumption\n",
							"\n",
							"trip_data_green_agg_df.write.mode(\"overwrite\").partitionBy(\"year\", \"month\").format(\"parquet\").saveAsTable(\"nyc_taxi_ldw_spark.trip_data_green_agg\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_CRIA_STG')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04_SQL_DEDICADO"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c70569af-a898-4d01-8235-23522e90d8c3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_CRIA_TABELA_SPARK_PARTITION')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_POOL_SPARK/CASE 2 CRM"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Cluster1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a6ce33c9-a213-4938-889a-0d085853eb7d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
						"name": "Cluster1",
						"type": "Spark",
						"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/carros/CRM.csv', format='csv',\r\n",
							"## If header exists uncomment line below\r\n",
							"delimiter=\";\",\r\n",
							"header=True\r\n",
							")\r\n",
							"df.write.mode(\"overwrite\").saveAsTable(\"crm\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT * FROM crm"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.sql(\"SELECT * FROM `default`.`crm`\")\r\n",
							"df.show(10)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"##Escreve e salva arquivo Parquet \r\n",
							"df.write.parquet(\"/bronze/crm/output\")"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"##Escreve e salva arquivo Parquet \"APPEND\"\r\n",
							"df.write.mode('append').parquet(\"/bronze/crm/output\")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"##Escreve e salva arquivo Parquet \"Overwrite\"\r\n",
							"df.write.mode('overwrite').parquet(\"/bronze/crm/output\")"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"##Escreve e salva arquivo Parquet particionado por ano\r\n",
							"df.write.partitionBy(\"ano\").mode('append').parquet(\"/bronze/crm/output\")"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"SELECT\r\n",
							"   ano\r\n",
							"FROM\r\n",
							"    OPENROWSET(\r\n",
							"        BULK 'https://adlstrnsolar99.dfs.core.windows.net/treinamento/bronze/crm/output/**',\r\n",
							"        FORMAT = 'PARQUET'\r\n",
							"    ) AS [result]\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_ACESSANDO_EXTERNAL_TABLE')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_POOL_SPARK/CASE 2 CRM"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Cluster1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "05652f7b-9730-4a93-b4ae-e72059f3f4ca"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
						"name": "Cluster1",
						"type": "Spark",
						"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": true
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Acessando external TABLES"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"df = spark.sql(\"SELECT * FROM lhdw.SILVER.D_CATEGORIA\")\n",
							"df.show(10)"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_CRIA_DIM')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04_SQL_DEDICADO"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b4093044-3903-44c4-8cb2-49ae213d9c19"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_ACESSANDO_LH')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01_POOL_SPARK/CASE 2 CRM"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Cluster1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ea3ddc34-6f9c-4f9e-905c-e64e1c311335"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
						"name": "Cluster1",
						"type": "Spark",
						"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"df = spark.sql(\"SELECT * FROM `default`.`crm`\")\n",
							"df.show(10)"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_CRIA_FATOS')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04_SQL_DEDICADO"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0544e7d0-7f80-4460-aafd-dd3c439c87cc"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/99_CARGA_E_CLASSIFCADOR')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04_SQL_DEDICADO"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5e3beb58-8929-46bb-8e70-571f46a72b6c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### O script cria um grupo de carga de trabalho chamado CEODemo para reservar recursos exclusivamente para o grupo de carga de trabalho. Por exemplo, um grupo de carga de trabalho com MIN_PERCENTAGE_RESOURCE definido como 10% e REQUEST_MIN_RESOURCE_GRANT_PERCENT definido como 5% tem simultaneidade 2 garantida."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"IF NOT EXISTS (SELECT * FROM sys.workload_management_workload_groups where name = 'CEODemo')\r\n",
							"BEGIN\r\n",
							"    Create WORKLOAD GROUP CEODemo WITH  \r\n",
							"    ( MIN_PERCENTAGE_RESOURCE = 10        -- integer value\r\n",
							"    ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 5 -- integer value\r\n",
							"    ,CAP_PERCENTAGE_RESOURCE = 100\r\n",
							"    )\r\n",
							"END"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"****#### Na janela de consulta, substitua o script pelo seguinte para criar um **classificador** de carga de trabalho chamado CEODreamDemo que atribui um grupo de carga de trabalho e a importância a solicitações de entrada:"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"IF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers where  name = 'CEODreamDemo')\r\n",
							"BEGIN\r\n",
							"    Create Workload Classifier CEODreamDemo with\r\n",
							"    ( Workload_Group ='CEODemo',MemberName='asa.sql.workload02',IMPORTANCE = BELOW_NORMAL);\r\n",
							"END"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"#### Na janela de consulta, substitua o script pelo seguinte para confirmar que não há nenhuma consulta ativa em execução por asa.sql.workload02 (pode haver consultas suspensas):"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"SELECT s.login_name, r.[Status], r.Importance, submit_time,\r\n",
							"start_time ,s.session_id FROM sys.dm_pdw_exec_sessions s\r\n",
							"JOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\r\n",
							"WHERE s.login_name IN ('asa.sql.workload02') and Importance\r\n",
							"is not NULL AND r.[status] in ('Running','Suspended')\r\n",
							"ORDER BY submit_time, status"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ler e gravar pandas')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03_PANDAS"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Cluster1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7deba9bb-d741-491f-9d3e-02c0b4763fb7"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fcdf740b-363d-4924-8de6-a7a7c85fa07f/resourceGroups/trn-synapse-solar-dev/providers/Microsoft.Synapse/workspaces/asa-trn-99/bigDataPools/Cluster1",
						"name": "Cluster1",
						"type": "Spark",
						"endpoint": "https://asa-trn-99.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Cluster1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Ler/gravar dados na conta de armazenamento padrão do ADLS do workspace do Synapse\r\n",
							"Ler arquivo de dados do URI do Azure Data Lake Storage Gen2 padrão"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import pandas\r\n",
							"\r\n",
							"df = pandas.read_csv('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/carros/CRM.csv',\r\n",
							"delimiter=\";\")\r\n",
							"print(df)\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### #Escreve arquivo csv, completo"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.to_csv('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/carros/saida/CRMfull.csv')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### #Escreve arquivo csv, colunas selecionadas"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.to_csv('abfss://treinamento@adlstrnsolar99.dfs.core.windows.net/bronze/carros/saida/CRMfiltro.csv',\r\n",
							"columns=['id','primeiro_nome','pais','ano'])"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Cluster1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 12,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		}
	]
}